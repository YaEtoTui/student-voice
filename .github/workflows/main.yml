name: Update Server

on:
  
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  
  workflow_dispatch:


jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}:latest
      
      - name: Update project on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e 
            
            REPO_NAME=${{ github.event.repository.name }}
            IMAGE_NAME=${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}:latest
            
            echo "Navigating to project directory..."
            if [ ! -d $REPO_NAME ]; then
              mkdir -p $REPO_NAME
              cd $REPO_NAME
               echo 'SECRET=' > .env
            else
              cd $REPO_NAME
            fi
          
            if [ $(docker ps -q -f name=$REPO_NAME) ]; then
              echo "Stopping and removing existing container..."
              docker stop $REPO_NAME
              docker rm $REPO_NAME
            else
              echo "No existing container found."
            fi
            
            if [ $(docker images -q $IMAGE_NAME) ]; then
              echo "Removing old image..."
              docker rmi --force $IMAGE_NAME || { echo "Failed to remove old image"; exit 1; }
            else
              echo "No old image found."
            fi
            
            echo "Starting new container..."
            docker run -d -p 8000:8080 --env-file .env --name $REPO_NAME --restart unless-stopped $IMAGE_NAME
